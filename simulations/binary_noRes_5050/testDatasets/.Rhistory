CI
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenUB)
temp1 <- boot.obj$t[,2]
CI[2] <- quantile(temp1, probs = 0.975)
CI[2]
CI[3:4] <- c(m.chosenLB, m.chosenUB)
CI
rm(list=ls())
N <- 2000 ##update
q <- 0.95
k <- 500 ##update
m.candidates <- unique(ceiling(N * q^(0:k)))
m.candidates <- m.candidates[m.candidates>=20]
numCandidates <- length(m.candidates)
m.candidates
sample(10^7,3)
rm(list=ls())
set.seed(4983095)
nsim <- 5000
seed <- sample(10^7,nsim)
set.seed(seed[val])
#############################################################################
##Libraries##
#############################################################################
library(lpSolveAPI)
library(boot)
#############################################################################
##Function for estimating bounds##
#############################################################################
boundsNoCov_res <- function(ordinalScale, YT, YC, maxBen, maxHarm){
nT <- length(YT) #number of treatment subjects
nC <- length(YC) #number of control subjects
if(nT == 0 | nC == 0){
#stop("WARNING: YT or YC is empty")
return(c(NA,NA,NA))
} else {
ordinalScale <- sort(ordinalScale, decreasing = FALSE)
L <- length(ordinalScale)
varCount <- L^2 #number of pi_{i,j}'s
#The matrix of pi_{i,j}'s is a L x L matrix with varCount pi_{i,j}'s.
scale <- nT * nC ##this can be made large to help with solving the linear program
#############################################################################
##Calculate marginal cdf's##
#############################################################################
cdf_C <- rep(0,L)
for (i in 1:L){
cdf_C[i] <- sum(YC <= ordinalScale[i])/nC
}
cdf_T <- rep(0,L)
for (i in 1:L){
cdf_T[i] <- sum(YT <= ordinalScale[i])/nT
}
#############################################################################
##Which pi_{i,j}'s are affected by the restrictions?##
#############################################################################
restrictions <- matrix(0,nrow=L,ncol=L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]-ordinalScale[i]>maxBen | ordinalScale[i]-ordinalScale[j]>maxHarm){
restrictions[i,j] <- 1
}
}
}
restrictions <- c(restrictions)
#############################################################################
##LP for epsilon##
#############################################################################
lprec <- make.lp(0,(varCount+1))
##Setting objective function
objfn <- c(rep(0,varCount),1)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, (varCount+1)), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = c(rep(1,varCount),0), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = c(restrictions,0), "=", rhs = 0)
##marginal cdf constraints
pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
#############################################################################
##Choose m##
#############################################################################
compute_estimators_on_bootstrap_replicate_of_dataset <- function(data,index,maxBen,maxHarm,subsampleSize){
replicate_data_set <- data[sample(1:nrow(data),size=subsampleSize,replace=TRUE),]
YC <- replicate_data_set[replicate_data_set$trt==0,]$y
YT <- replicate_data_set[replicate_data_set$trt==1,]$y
res <- boundsNoCov_res(1:2, YT, YC, maxBen, maxHarm)
return(res[1:2])
}
#############################################################################
##Inputs##
#############################################################################
maxBen <- 100
maxHarm <- 0
N <- 200 ##update
q <- 0.95
k <- 500 ##update
m.candidates <- unique(ceiling(N * q^(0:k)))
m.candidates <- m.candidates[m.candidates>=20]
numCandidates <- length(m.candidates)
bootrep <- 500
bounds <- rep(NA, 3) #bound estimates and epsilon
CI <- rep(NA, 4) ##CI for the proportion who benefit and the values m selected for lower bound and upper bound
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE), y = sample(1:2, size = N, replace = TRUE))
bounds <- boundsNoCov_res(1:2,datasamp$y[datasamp$trt == 1], datasamp$y[datasamp$trt == 0], maxBen, maxHarm)
matLB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
matUB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
for (l in 1:numCandidates){
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=bootrep, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.candidates[l])
matLB[l,] <- t(sort(boot.obj$t[,1], na.last = TRUE))
matUB[l,] <- t(sort(boot.obj$t[,2], na.last = TRUE))
}
matLB <- cbind(m.candidates, matLB)
matLB <- matLB[complete.cases(matLB),] ##get rid of candidate m's with any NA's (m was too small, nT or nC = 0)
m.candidatesLB <- matLB[,1]
matLB <- matLB[,-1]
matUB <- cbind(m.candidates, matUB)
matUB <- matUB[complete.cases(matUB),]
m.candidatesUB <- matUB[,1]
matUB <- matUB[,-1]
temp1 <- matLB[1:(nrow(matLB)-1),]-matLB[2:nrow(matLB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenLB <- m.candidatesLB[min(which(temp1==min(temp1)))]
temp1 <- matUB[1:(nrow(matUB)-1),]-matUB[2:nrow(matUB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenUB <- m.candidatesUB[min(which(temp1==min(temp1)))]
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenLB)
temp1 <- boot.obj$t[,1]
CI[1] <- quantile(temp1, probs = .025)
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenUB)
temp1 <- boot.obj$t[,2]
CI[2] <- quantile(temp1, probs = 0.975)
CI[3:4] <- c(m.chosenLB, m.chosenUB)
CI
bounds
564.68+16.78
564.68+16.78+459
564.68+16.78+459+60
564.68+16.78+459+80
(24.62-25)
(24.62-25)/0.38
(22.44-25)/0.38
(24.24-25)/0.38
.76/2
(23.86-25)/0.38
26.14- 25
1.14/0.38
(22.44-25)/0.38
(130-140.4)
(130-140.4)/56.3
56.3/sqrt(5)
56.3/sqrt(20)
25-22.44
?pnorm
pnorm(0.95)
qnorm(0.95)
qnorm(0.95)*4.042386+23.02955
15*5
rm(list=ls())
nsim <- 5000
set.seed(4983095)
seed <- sample(10^7,nsim)
#####
#############################################################################
library(lpSolveAPI)
library(boot)
#############################################################################
##Function for estimating bounds##
#############################################################################
boundsNoCov_res <- function(ordinalScale, YT, YC, maxBen, maxHarm){
nT <- length(YT) #number of treatment subjects
nC <- length(YC) #number of control subjects
if(nT == 0 | nC == 0){
#stop("WARNING: YT or YC is empty")
return(c(NA,NA,NA))
} else {
ordinalScale <- sort(ordinalScale, decreasing = FALSE)
L <- length(ordinalScale)
varCount <- L^2 #number of pi_{i,j}'s
#The matrix of pi_{i,j}'s is a L x L matrix with varCount pi_{i,j}'s.
scale <- nT * nC ##this can be made large to help with solving the linear program
#############################################################################
##Calculate marginal cdf's##
#############################################################################
cdf_C <- rep(0,L)
for (i in 1:L){
cdf_C[i] <- sum(YC <= ordinalScale[i])/nC
}
cdf_T <- rep(0,L)
for (i in 1:L){
cdf_T[i] <- sum(YT <= ordinalScale[i])/nT
}
#############################################################################
##Which pi_{i,j}'s are affected by the restrictions?##
#############################################################################
restrictions <- matrix(0,nrow=L,ncol=L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]-ordinalScale[i]>maxBen | ordinalScale[i]-ordinalScale[j]>maxHarm){
restrictions[i,j] <- 1
}
}
}
restrictions <- c(restrictions)
#############################################################################
##LP for epsilon##
#############################################################################
lprec <- make.lp(0,(varCount+1))
##Setting objective function
objfn <- c(rep(0,varCount),1)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, (varCount+1)), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = c(rep(1,varCount),0), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = c(restrictions,0), "=", rhs = 0)
##marginal cdf constraints
pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
#############################################################################
##Choose m##
#############################################################################
compute_estimators_on_bootstrap_replicate_of_dataset <- function(data,index,maxBen,maxHarm,subsampleSize){
replicate_data_set <- data[sample(1:nrow(data),size=subsampleSize,replace=TRUE),]
YC <- replicate_data_set[replicate_data_set$trt==0,]$y
YT <- replicate_data_set[replicate_data_set$trt==1,]$y
res <- boundsNoCov_res(1:2, YT, YC, maxBen, maxHarm)
return(res[1:2])
}
#############################################################################
##Inputs##
#############################################################################
maxBen <- 100
maxHarm <- 100
N <- 200 ##update
q <- 0.95
k <- 500 ##update
m.candidates <- unique(ceiling(N * q^(0:k)))
m.candidates <- m.candidates[m.candidates>=20]
numCandidates <- length(m.candidates)
bootrep <- 5000
#############################################################################
##Simulate randomized trial##
#############################################################################
bounds <- rep(NA, 3) #bound estimates and epsilon
CI <- rep(NA, 4) ##CI for the
val <- 10
set.seed(seed[val])
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE), y = sample(1:2, size = N, replace = TRUE))
table(datasamp)
rm(list=ls())
nsim <- 5000
set.seed(4983095)
seed <- sample(10^7,nsim)
N <- 200
datasets <- matrix(NA, nrow = nsim, ncol = 6) ##columns will be pC, pT, pC1, pC2, pT1, pT2
sim <- 10
set.seed(seed[sim])
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE), y = sample(1:2, size = N, replace = TRUE))
table(datasamp)
30*5000
150000/60
2500/24
30*5000/60/24
30*5000/60/24/200
10000/200
10000/40
10000/40/24
10000/68
10000/68/24
70*12
5000/70
5000/70/2
/24
5000/70/2/24
(146.35-123.84)/sqrt(26.89^2/34+15.83^2/73)
17.58 + 2.101*15.12/sqrt(19)
17.58 - 2.101*15.12/sqrt(19)
21.47-2.145*10.41/sqrt(15)
21.47+2.145*10.41/sqrt(15)
7.43-2.021*11.41/sqrt(44)
7.43+2.021*11.41/sqrt(44)
13.69-2.048*20.94/sqrt(29)
13.69+2.048*20.94/sqrt(29)
1.5*(44-6)
44+57
6-(57)
1874+229
(44-25)/0.675
138/2103
exp(-1.5)
load("~/Dropbox/research/github/CI_for_propWhoBenefit/binary_noRes/practical/quadprog/results/res2000.Rdata")
ci.qp <- ci
ci.qp
load("~/Dropbox/research/github/CI_for_propWhoBenefit/binary_noRes/practical/cplexqp/results/res2000.Rdata")
dim(ci.qp)
ci.cp <- ci
head(ci.cp)
5000*30
5000*30/200
750/60
sample(10^7,4)
rm(list=ls())
nsim <- 5000
set.seed(5422521)
seed <- sample(10^7,nsim)
N <- 200
datasets <- matrix(NA, nrow = nsim, ncol = 6) ##columns will be pC, pT, pC1, pC2, pT1, pT2
for (sim in 1:nsim){
set.seed(seed[sim])
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE))
datasamp$y = NA
NT <- sum(datasamp$trt==1)
NC <- N - NT
datasamp$y[datasamp$trt==1] <- sample(1:2, size = NT, replace = TRUE, prob = c(0.5, 0.5))
datasamp$y[datasamp$trt==0] <- sample(1:2, size = NC, replace = TRUE, prob = c(0.5, 0.5))
datasets[sim,] <- c(sum(datasamp$trt == 0), sum(datasamp$trt == 1),
sum(datasamp$trt == 0 & datasamp$y == 1), sum(datasamp$trt == 0 & datasamp$y == 2),
sum(datasamp$trt == 1 & datasamp$y == 1), sum(datasamp$trt == 1 & datasamp$y == 2))
}
datasets <- datasets/N
setwd("~/Dropbox/research/github/CI_for_propWhoBenefit/binary_noRes_5050/testDatasets")
write.table(datasets, file = "N200.txt", row.names = FALSE, col.names = FALSE)
rm(list=ls())
nsim <- 5000
set.seed(9091019)
seed <- sample(10^7,nsim)
N <- 500
datasets <- matrix(NA, nrow = nsim, ncol = 6) ##columns will be pC, pT, pC1, pC2, pT1, pT2
for (sim in 1:nsim){
set.seed(seed[sim])
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE))
datasamp$y = NA
NT <- sum(datasamp$trt==1)
NC <- N - NT
datasamp$y[datasamp$trt==1] <- sample(1:2, size = NT, replace = TRUE, prob = c(0.5, 0.5))
datasamp$y[datasamp$trt==0] <- sample(1:2, size = NC, replace = TRUE, prob = c(0.5, 0.5))
datasets[sim,] <- c(sum(datasamp$trt == 0), sum(datasamp$trt == 1),
sum(datasamp$trt == 0 & datasamp$y == 1), sum(datasamp$trt == 0 & datasamp$y == 2),
sum(datasamp$trt == 1 & datasamp$y == 1), sum(datasamp$trt == 1 & datasamp$y == 2))
}
datasets <- datasets/N
setwd("~/Dropbox/research/github/CI_for_propWhoBenefit/binary_noRes_5050/testDatasets")
write.table(datasets, file = "N500.txt",row.names = FALSE, col.names = FALSE)
rm(list=ls())
nsim <- 5000
set.seed(6881697)
seed <- sample(10^7,nsim)
N <- 1000
datasets <- matrix(NA, nrow = nsim, ncol = 6) ##columns will be pC, pT, pC1, pC2, pT1, pT2
for (sim in 1:nsim){
set.seed(seed[sim])
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE))
datasamp$y = NA
NT <- sum(datasamp$trt==1)
NC <- N - NT
datasamp$y[datasamp$trt==1] <- sample(1:2, size = NT, replace = TRUE, prob = c(0.5, 0.5))
datasamp$y[datasamp$trt==0] <- sample(1:2, size = NC, replace = TRUE, prob = c(0.5, 0.5))
datasets[sim,] <- c(sum(datasamp$trt == 0), sum(datasamp$trt == 1),
sum(datasamp$trt == 0 & datasamp$y == 1), sum(datasamp$trt == 0 & datasamp$y == 2),
sum(datasamp$trt == 1 & datasamp$y == 1), sum(datasamp$trt == 1 & datasamp$y == 2))
}
datasets <- datasets/N
setwd("~/Dropbox/research/github/CI_for_propWhoBenefit/binary_noRes_5050/testDatasets")
write.table(datasets, file = "N1000.txt",row.names = FALSE, col.names = FALSE)
rm(list=ls())
nsim <- 5000
set.seed(9814663)
seed <- sample(10^7,nsim)
N <- 2000
datasets <- matrix(NA, nrow = nsim, ncol = 6) ##columns will be pC, pT, pC1, pC2, pT1, pT2
for (sim in 1:nsim){
set.seed(seed[sim])
datasamp <- data.frame(trt = sample(0:1, size = N, replace = TRUE))
datasamp$y = NA
NT <- sum(datasamp$trt==1)
NC <- N - NT
datasamp$y[datasamp$trt==1] <- sample(1:2, size = NT, replace = TRUE, prob = c(0.5, 0.5))
datasamp$y[datasamp$trt==0] <- sample(1:2, size = NC, replace = TRUE, prob = c(0.5, 0.5))
datasets[sim,] <- c(sum(datasamp$trt == 0), sum(datasamp$trt == 1),
sum(datasamp$trt == 0 & datasamp$y == 1), sum(datasamp$trt == 0 & datasamp$y == 2),
sum(datasamp$trt == 1 & datasamp$y == 1), sum(datasamp$trt == 1 & datasamp$y == 2))
}
datasets <- datasets/N
setwd("~/Dropbox/research/github/CI_for_propWhoBenefit/binary_noRes_5050/testDatasets")
write.table(datasets, file = "N2000.txt",row.names = FALSE, col.names = FALSE)
