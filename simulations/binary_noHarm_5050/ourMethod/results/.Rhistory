Average_Outgoing_Calls = sum(Total_Outgoing_Calls, na.rm = T)/(days_before_MADRS + 1),
Average_Missed_Calls = sum(Total_Missed_Calls, na.rm = T)/(days_before_MADRS + 1),
Sum_Incoming_Unique = sum(Total_Incoming_Unique, na.rm = T),
Sum_Missed_Unique = sum(Total_Missed_Unique, na.rm = T),
Sum_Outgoing_Unique = sum(Total_Outgoing_Unique, na.rm = T),
Total_Incoming_Hours = sum(Total_Incoming_Minutes, na.rm = T)/60,
Total_Outgoing_Hours = sum(Total_Outgoing_Minutes, na.rm = T)/60,
##Demographics and Phone Type
race = unique(race),
age = unique(age),
gender = unique(gender),
phone_type = unique(phone_type),
##Diagnosis
diagnosis = unique(diagnosis)
) %>% data.frame
model_data$Average_Incoming_Calls[model_data$phone_type == "iOS"] <- NA
model_data$Average_Outgoing_Calls[model_data$phone_type == "iOS"] <- NA
model_data$Average_Missed_Calls[model_data$phone_type == "iOS"] <- NA
model_data$Sum_Incoming_Unique[model_data$phone_type == "iOS"] <- NA
model_data$Sum_Outgoing_Unique[model_data$phone_type == "iOS"] <- NA
model_data$Sum_Missed_Unique[model_data$phone_type == "iOS"] <- NA
model_data$Total_Incoming_Hours[model_data$phone_type == "iOS"] <- NA
model_data$Total_Outgoing_Hours[model_data$phone_type == "iOS"] <- NA
mob_data <- data %>%
mutate(weekend = isWeekend(Date)) %>%
group_by(patient, visit_type, weekend) %>%
dplyr::summarize(
##GPS
Hometime = mean(Hometime, na.rm=T),
DistTravelled = mean(DistTravelled, na.rm=T),
RoG = mean(log(RoG+1), na.rm=T),
MaxDiam = mean(log(MaxDiam+1), na.rm=T),
MaxHomeDist = mean(log(MaxHomeDist+1), na.rm=T),
SigLocsVisited = mean(SigLocsVisited, na.rm=T),
AvgFlightLen = mean(log(AvgFlightLen+1), na.rm=T),
StdFlightLen = mean(log(StdFlightLen+1), na.rm=T),
AvgFlightDur = mean(log(AvgFlightDur+1), na.rm=T),
StdFlightDur = mean(log(StdFlightDur+1), na.rm=T),
ProbPause = mean(ProbPause, na.rm=T),
SigLocEntropy = mean(log(SigLocEntropy+1), na.rm=T),
CircdnRtn = mean(CircdnRtn, na.rm=T),
WkEndDayRtn = mean(WkEndDayRtn, na.rm=T)
) %>% data.frame
mob_data_weekend <- subset(mob_data, weekend == TRUE)
mob_data_weekend %<>% select(-weekend) %>% data.frame
x <- names(mob_data_weekend)
indices <- which(x != "patient" & x != "visit_type")
names(mob_data_weekend)[indices] <- paste(names(mob_data_weekend)[indices],"_wkend",sep = "")
mob_data_weekday <- subset(mob_data, weekend == FALSE)
mob_data_weekday %<>% select(-weekend) %>% data.frame
x <- names(mob_data_weekday)
indices <- which(x != "patient" & x != "visit_type")
names(mob_data_weekday)[indices] <- paste(names(mob_data_weekday)[indices],"_wkday",sep = "")
mob_data <- full_join(mob_data_weekday, mob_data_weekend, by = c("patient","visit_type"))
head(mob_data)
model_data %<>% full_join(mob_data, by = c("patient", "visit_type")) %>%
arrange(patient, visit_type)
phq8_data_list <- list()
j <- 1
for (patient_name in patient_names){
patient_data <- phq8_data %>% filter(patient == patient_name)
patient_dates <- clinic_data %>% filter(patient == patient_name) %>% dplyr::select(c(visit_type, Visit_Date))
for (i in 1:nrow(patient_dates)){
visit_date <- patient_dates[i,"Visit_Date"]
sub_data <- subset(patient_data, Date <= visit_date)
if (nrow(sub_data) > 0){
phq8_data_list[[j]] <- sub_data[sub_data$Date == max(sub_data$Date),] %>%
dplyr::select(-c(sum_answers)) %>%
rename(PHQ8_Date = Date) %>%
rename(PHQ8_questions_answered = questions_answered)
phq8_data_list[[j]]$visit_type <- patient_dates[i,"visit_type"]
j <- j + 1
}
}
}
phq8_data_closest <- do.call(rbind, phq8_data_list)
model_data %<>% full_join(phq8_data_closest, by = c("patient", "visit_type")) %>%
arrange(patient, visit_type)
model_data %<>% full_join(acc, by = c("patient","visit_type")) %>%
arrange(patient, visit_type)
patient_dropout
unique(model_data$patient)
model_data <- subset(model_data, !(patient %in% patient_dropout))
apply(model_data, 2, function(x){sum(is.na(x))})
rm(data,
phq8_data,
survey_data,
summarized_calls_data,
sub_data,
phq8_data_closest,
patient_data,
patient_dates,
baseline_dates,
dates,
day_acc_data,
day_acc_data_6hr,
acc,
likert_data,
mobility_data)
included_vars <- c("patient",
"visit_type",
"Score",
"baseline_score",
"age",
"gender",
"diagnosis",
"PHQ8",
"Hometime_wkday",
"Hometime_wkend",
"DistTravelled_wkday",
"DistTravelled_wkend",
"RoG_wkday",
"RoG_wkend",
"MaxDiam_wkday",
"MaxDiam_wkend",
"MaxHomeDist_wkday",
"MaxHomeDist_wkend",
"SigLocsVisited_wkday",
"SigLocsVisited_wkend",
"AvgFlightLen_wkday",
"AvgFlightLen_wkend",
"StdFlightLen_wkday",
"StdFlightLen_wkend",
"AvgFlightDur_wkday",
"AvgFlightDur_wkend",
"StdFlightDur_wkday",
"StdFlightDur_wkend",
"ProbPause_wkday",
"ProbPause_wkend",
"SigLocEntropy_wkday",
"SigLocEntropy_wkend",
"CircdnRtn_wkday",
"CircdnRtn_wkend",
"WkEndDayRtn_wkday",
"WkEndDayRtn_wkend",
"avg_activity_wkday",
"avg_activity_wkend",
"GPSMins",
"accelerometer_minutes")
model_data <- model_data %>% dplyr::select(included_vars)
nrow(model_data)
table(model_data$patient)
model_data <- model_data[complete.cases(model_data),]
nrow(model_data)
unique(model_data$patient)
table(model_data$patient)
factor_variables <- c("gender", "diagnosis")
for(factor_variable in factor_variables){
model_data[,factor_variable] <- as.factor(model_data[,factor_variable])
}
patient_names <- unique(model_data$patient)
npatients <- length(patient_names)
passive_variables <- setdiff(included_vars, c("patient",
"visit_type",
"Score",
"baseline_score",
"age",
"gender",
"diagnosis",
"PHQ8"))
model_data$age <- as.numeric(scale(model_data$age))
model_data$baseline_score <- as.numeric(scale(model_data$baseline_score))
passive_variables
model_data$age <- as.numeric(scale(model_data$age))
model_data$baseline_score <- as.numeric(scale(model_data$baseline_score))
formula_statements <- list(
demo = "Score ~ (1|patient) + gender + diagnosis + age",
BM = "Score ~ (1|patient) + baseline_score",
phq8_BM = "Score ~ (1|patient) + baseline_score + PHQ8",
pc1_BM = "Score ~ (1|patient) + baseline_score + PC1",
phq8_pc1_BM = "Score ~ (1|patient) + baseline_score + PHQ8 + PC1",
phq8_demo_BM = "Score ~ (1|patient) + gender + diagnosis + age + baseline_score + PHQ8",
pc1_demo_BM = "Score ~ (1|patient) + gender + diagnosis + age + baseline_score + PC1",
phq8_pc1_demo_BM = "Score ~ (1|patient) + gender + diagnosis + age + baseline_score + PHQ8 + PC1"
)
formula_names <- names(formula_statements)
predictions_allFormulas <- list()
for (formula_name in formula_names){
print(formula_name)
predictions <- vector(mode = 'list', length = npatients)
formula <- formula_statements[[formula_name]]
for (patient_name in patient_names){
##Data of other patients
training_data <- model_data %>% filter(patient != patient_name)
##Data for the patient
test_data <- model_data %>% filter(patient == patient_name)
if (length(grep("passive",formula_name))>0 | length(grep("pc",formula_name))>0){
##Do PCA on training data
prout <- prcomp(training_data[,passive_variables], center = TRUE, scale = TRUE)
training_scores <- data.frame(prout$x)
training_data$PC1 <- training_scores$PC1
training_data$PC2 <- training_scores$PC2
training_data$PC3 <- training_scores$PC3
##Get PC score vectors for the test data
test_scores <- predict(prout, test_data[,passive_variables])
test_scores <- data.frame(test_scores)
test_data$PC1 <- test_scores$PC1
test_data$PC2 <- test_scores$PC2
test_data$PC3 <- test_scores$PC3
}
##Fit linear model
#fit <- lm(formula, data = training_data)
##Fit linear mixed model
fit <- lmer(formula, data = training_data)
##Compute predictions on test data
patient_predictions <- predict(fit, newdata = test_data, allow.new.levels = TRUE)
##Record the predictions
predictions[[patient_name]] <- data.frame(patient = patient_name,
visit_type = test_data$visit_type,
MADRS_pred = patient_predictions,
MADRS = test_data$Score,
diag = test_data$diagnosis)
}
predictions <- do.call(rbind, predictions)
row.names(predictions) <- c()
predictions_allFormulas[[formula_name]] <- predictions
}
matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
BP_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
HC_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
SCH_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
MDD_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
i <- 1 ##keep track of the formula_name
for (formula_name in formula_names){
print(formula_name)
predictions <- predictions_allFormulas[[formula_name]]
predictions$patient <- as.character(predictions$patient)
predictions$diag <- as.character(predictions$diag)
##Compute the average squared error by patient
predictions$squaredError <- (predictions$MADRS_pred - predictions$MADRS)^2
rmse_by_patient <- predictions %>% group_by(patient) %>% summarise(RMSE = sqrt(mean(squaredError))) %>% data.frame
print("Average RMSE across patients")
print(mean(rmse_by_patient$RMSE))
##RMSE by visit (some people may not be represented at all follow-up's)
predictions %>% group_by(visit_type) %>% summarise(RMSE = sqrt(mean(squaredError)))
##Look at each visit separately; only look at people with predictions for all four visits
visits <- c("fu1","fu2","fu3","fu4")
for (v in 1:4){
visit_predictions <- subset(predictions, visit_type == visits[v] & !(patient %in% c("hukb9nh6","pb4zitvg","qxw1vk4a")))
##Get correlation using all participants
matrix_with_corr[i, v + 1] <- cor(visit_predictions$MADRS_pred, visit_predictions$MADRS)
##Get correlation by diagnostic category
MDD <- subset(visit_predictions, diag == "MDD")
MDD_matrix_with_corr[i, v + 1] <- cor(MDD$MADRS_pred, MDD$MADRS)
SCH <- subset(visit_predictions, diag == "SCH")
SCH_matrix_with_corr[i, v + 1] <- cor(SCH$MADRS_pred, SCH$MADRS)
HC <- subset(visit_predictions, diag == "HC")
HC_matrix_with_corr[i, v + 1] <- cor(HC$MADRS_pred, HC$MADRS)
BP <- subset(visit_predictions, diag == "BP1")
BP_matrix_with_corr[i, v + 1] <- cor(BP$MADRS_pred, BP$MADRS)
##Plot predicted score vs true score, by visit
plot(0, 0, col=NA, xlim=c(0,40), ylim=c(0,40), xlab="MADRS Score", ylab="Predicted MADRS Score",
main= paste0("True and Predicted MADRS Scores\n",formula_name))
abline(a = 0, b = 1,lwd=1.5,col=rgb(.3,.3,.3),lty=2)
points(visit_predictions[,"MADRS"], visit_predictions[,"MADRS_pred"],
col=unlist(diagnosis_colors[unlist(diagnosis_dict[visit_predictions[,"patient"]])]),
pch=16, cex=1.5)
legend("topleft",
legend = c("HC", "MDD", "BP I", "SCH"),
col = c("blue", "green", "red", "orange"),
pch = 16)
}
##RMSE by diagnosis
temp <- merge(rmse_by_patient, clinic_data_WIDE[,c("patient","diagnosis")], by = "patient")
print(temp %>% group_by(diagnosis) %>% summarise(RMSE = mean(RMSE)) %>% data.frame)
##Plot the predicted MADRS versus MADRS
pdf(paste(figure_filepath,"/MADRS_Predictions_",formula_name,".pdf", sep = ""))
plot(0, 0, col=NA, xlim=c(0,40), ylim=c(0,40), xlab="MADRS Score", ylab="Predicted MADRS Score",
main= paste0("True and Predicted MADRS Scores\n",formula_name))
abline(a = 0, b = 1,lwd=1.5,col=rgb(.3,.3,.3),lty=2)
points(predictions[,"MADRS"], predictions[,"MADRS_pred"],
col=unlist(diagnosis_colors[unlist(diagnosis_dict[predictions[,"patient"]])]),
pch=16, cex=1.5)
legend("topleft",
legend = c("HC", "MDD", "BP I", "SCH"),
col = c("blue", "green", "red", "orange"),
pch = 16)
dev.off()
i <- i + 1
}
data.frame(formula_names,apply(matrix_with_corr[,-1], 2, function(x){round(x,2)}))
data.frame(formula_names,apply(MDD_matrix_with_corr[,-1], 2, function(x){round(x,2)}))
data.frame(formula_names,apply(BP_matrix_with_corr[,-1], 2, function(x){round(x,2)}))
data.frame(formula_names,apply(SCH_matrix_with_corr[,-1], 2, function(x){round(x,2)}))
data.frame(formula_names,apply(HC_matrix_with_corr[,-1], 2, function(x){round(x,2)}))
apply(matrix_with_corr[,-1]^2, 2, function(x){round(x,2)})
apply(MDD_matrix_with_corr[,-1]^2, 2, function(x){round(x,2)})
apply(BP_matrix_with_corr[,-1]^2, 2, function(x){round(x,2)})
apply(SCH_matrix_with_corr[,-1]^2, 2, function(x){round(x,2)})
apply(HC_matrix_with_corr[,-1]^2, 2, function(x){round(x,2)})
formula_statements <- list(
demo = "Score ~ (1|patient) + gender + diagnosis + age",
BM = "Score ~ (1|patient) + baseline_score",
phq8 = "Score ~ (1|patient) + PHQ8",
pc1 = "Score ~ (1|patient) + PC1",
phq8_BM = "Score ~ (1|patient) + baseline_score + PHQ8",
pc1_BM = "Score ~ (1|patient) + baseline_score + PC1",
phq8_pc1_BM = "Score ~ (1|patient) + baseline_score + PHQ8 + PC1",
phq8_demo_BM = "Score ~ (1|patient) + gender + diagnosis + age + baseline_score + PHQ8",
pc1_demo_BM = "Score ~ (1|patient) + gender + diagnosis + age + baseline_score + PC1",
phq8_pc1_demo_BM = "Score ~ (1|patient) + gender + diagnosis + age + baseline_score + PHQ8 + PC1"
)
formula_names <- names(formula_statements)
predictions_allFormulas <- list()
for (formula_name in formula_names){
print(formula_name)
predictions <- vector(mode = 'list', length = npatients)
formula <- formula_statements[[formula_name]]
for (patient_name in patient_names){
##Data of other patients
training_data <- model_data %>% filter(patient != patient_name)
##Data for the patient
test_data <- model_data %>% filter(patient == patient_name)
if (length(grep("passive",formula_name))>0 | length(grep("pc",formula_name))>0){
##Do PCA on training data
prout <- prcomp(training_data[,passive_variables], center = TRUE, scale = TRUE)
training_scores <- data.frame(prout$x)
training_data$PC1 <- training_scores$PC1
training_data$PC2 <- training_scores$PC2
training_data$PC3 <- training_scores$PC3
##Get PC score vectors for the test data
test_scores <- predict(prout, test_data[,passive_variables])
test_scores <- data.frame(test_scores)
test_data$PC1 <- test_scores$PC1
test_data$PC2 <- test_scores$PC2
test_data$PC3 <- test_scores$PC3
}
##Fit linear model
#fit <- lm(formula, data = training_data)
##Fit linear mixed model
fit <- lmer(formula, data = training_data)
##Compute predictions on test data
patient_predictions <- predict(fit, newdata = test_data, allow.new.levels = TRUE)
##Record the predictions
predictions[[patient_name]] <- data.frame(patient = patient_name,
visit_type = test_data$visit_type,
MADRS_pred = patient_predictions,
MADRS = test_data$Score,
diag = test_data$diagnosis)
}
predictions <- do.call(rbind, predictions)
row.names(predictions) <- c()
predictions_allFormulas[[formula_name]] <- predictions
}
matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
BP_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
HC_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
SCH_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
MDD_matrix_with_corr <- data.frame(formula_names,
fu1 = NA,
fu2 = NA,
fu3 = NA,
fu4 = NA)
i <- 1 ##keep track of the formula_name
for (formula_name in formula_names){
print(formula_name)
predictions <- predictions_allFormulas[[formula_name]]
predictions$patient <- as.character(predictions$patient)
predictions$diag <- as.character(predictions$diag)
##Compute the average squared error by patient
predictions$squaredError <- (predictions$MADRS_pred - predictions$MADRS)^2
rmse_by_patient <- predictions %>% group_by(patient) %>% summarise(RMSE = sqrt(mean(squaredError))) %>% data.frame
print("Average RMSE across patients")
print(mean(rmse_by_patient$RMSE))
##RMSE by visit (some people may not be represented at all follow-up's)
predictions %>% group_by(visit_type) %>% summarise(RMSE = sqrt(mean(squaredError)))
##Look at each visit separately; only look at people with predictions for all four visits
visits <- c("fu1","fu2","fu3","fu4")
for (v in 1:4){
visit_predictions <- subset(predictions, visit_type == visits[v] & !(patient %in% c("hukb9nh6","pb4zitvg","qxw1vk4a")))
##Get correlation using all participants
matrix_with_corr[i, v + 1] <- cor(visit_predictions$MADRS_pred, visit_predictions$MADRS)
##Get correlation by diagnostic category
MDD <- subset(visit_predictions, diag == "MDD")
MDD_matrix_with_corr[i, v + 1] <- cor(MDD$MADRS_pred, MDD$MADRS)
SCH <- subset(visit_predictions, diag == "SCH")
SCH_matrix_with_corr[i, v + 1] <- cor(SCH$MADRS_pred, SCH$MADRS)
HC <- subset(visit_predictions, diag == "HC")
HC_matrix_with_corr[i, v + 1] <- cor(HC$MADRS_pred, HC$MADRS)
BP <- subset(visit_predictions, diag == "BP1")
BP_matrix_with_corr[i, v + 1] <- cor(BP$MADRS_pred, BP$MADRS)
##Plot predicted score vs true score, by visit
plot(0, 0, col=NA, xlim=c(0,40), ylim=c(0,40), xlab="MADRS Score", ylab="Predicted MADRS Score",
main= paste0("True and Predicted MADRS Scores\n",formula_name))
abline(a = 0, b = 1,lwd=1.5,col=rgb(.3,.3,.3),lty=2)
points(visit_predictions[,"MADRS"], visit_predictions[,"MADRS_pred"],
col=unlist(diagnosis_colors[unlist(diagnosis_dict[visit_predictions[,"patient"]])]),
pch=16, cex=1.5)
legend("topleft",
legend = c("HC", "MDD", "BP I", "SCH"),
col = c("blue", "green", "red", "orange"),
pch = 16)
}
##RMSE by diagnosis
temp <- merge(rmse_by_patient, clinic_data_WIDE[,c("patient","diagnosis")], by = "patient")
print(temp %>% group_by(diagnosis) %>% summarise(RMSE = mean(RMSE)) %>% data.frame)
##Plot the predicted MADRS versus MADRS
pdf(paste(figure_filepath,"/MADRS_Predictions_",formula_name,".pdf", sep = ""))
plot(0, 0, col=NA, xlim=c(0,40), ylim=c(0,40), xlab="MADRS Score", ylab="Predicted MADRS Score",
main= paste0("True and Predicted MADRS Scores\n",formula_name))
abline(a = 0, b = 1,lwd=1.5,col=rgb(.3,.3,.3),lty=2)
points(predictions[,"MADRS"], predictions[,"MADRS_pred"],
col=unlist(diagnosis_colors[unlist(diagnosis_dict[predictions[,"patient"]])]),
pch=16, cex=1.5)
legend("topleft",
legend = c("HC", "MDD", "BP I", "SCH"),
col = c("blue", "green", "red", "orange"),
pch = 16)
dev.off()
i <- i + 1
}
data.frame(formula_names,apply(matrix_with_corr[,-1], 2, function(x){round(x,2)}))
load("results.Rdata")
getwd()
setwd("/Users/emhuang/Desktop")
load("results.Rdata")
getfiles()
get.files()
list.files()
load("result.Rdata")
mean(result$ci_left == 0.01)
mean(result$ci_left == 0)
mean(result$ci_left == 0 & result$ci_right >= 0.01)
result$empdiff <- result$pt2 - result$pc2
boxplot(empdiff ~ ci_left, result,
xlab = "Left Endpoint of Confidence Interval for Fraction who Benefit")
boxplot(empdiff ~ ci_left, result,
xlab = "Left Endpoint of Confidence Interval Generated Using our Method",
ylab = "Observed Difference in Proportions")
boxplot(empdiff ~ ci_left, result,
xlab = "Left Endpoint of the Confidence Interval Generated by our Method",
ylab = "Observed Difference in Proportions")
pdf("Boxplot_Diff_Prop.pdf")
boxplot(empdiff ~ ci_left, result,
xlab = "Left Endpoint of the Confidence Interval Generated by our Method",
ylab = "Observed Difference in Proportions")
dev.off()
for (psi in seq(from = 0, to = 0.1, by = 0.01)){
print(c(psi, mean(result$ci_left == psi)))
}
for (psi in seq(from = 0, to = 0.1, by = 0.01)){
print(c(psi, 5000*mean(result$ci_left == psi)))
}
for (psi in seq(from = 0, to = 0.1, by = 0.01)){
print(c(psi, 100*mean(result$ci_left == psi)))
}
4771+82+44+47+23+19+6+6+2
head(result)
result %<>% select(sim, ci_left, ci_right, pc1, pc2, pt1, pt2) %>% data.frame
library(dplyr)
result %<>% select(sim, ci_left, ci_right, pc1, pc2, pt1, pt2) %>% data.frame
head(result)
mean(result$ci_left == 0.01)
mean(result$ci_left == 0)
mean(result$ci_left == 0 & result$ci_right >= 0.01)
result$empdiff <- result$pt2 - result$pc2
pdf("Boxplot_Diff_Prop.pdf")
boxplot(empdiff ~ ci_left, result,
xlab = "Left Endpoint of the Confidence Interval Generated by our Method",
ylab = "Observed Difference in Proportions")
dev.off()
for (psi in seq(from = 0, to = 0.1, by = 0.01)){
print(c(psi, 100*mean(result$ci_left == psi)))
}
save(result,"result_N500_detailed.Rdata")
save(result,file = "result_N500_detailed.Rdata")
setwd("~/Dropbox/research/github/CI-for-fraction-who-benefit/simulations/binary_noHarm_5050/ourMethod/results")
setwd("~/Dropbox/research/github/CI-for-fraction-who-benefit/simulations/binary_noHarm_5050/ourMethod/results")
load("res500_detailed.Rdata")
result$empdiff <- result$pt2 - result$pc2
boxplot(empdiff ~ ci_left, result,
xlab = "Left Endpoint of the Confidence Interval Generated by our Method",
ylab = "Observed Difference in Proportions")
for (psi in seq(from = 0, to = 0.1, by = 0.01)){
print(c(psi, 100*mean(result$ci_left == psi)))
}
